// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]  // 
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  phone       String?
  address     String?
  role        String        @default("customer")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]
}

model Appointment {
  id        Int      @id @default(autoincrement())
  date      DateTime
  serviceId Int
  staffId   Int
  userId    Int
  status    String   @default("pending") // e.g., pending, confirmed, completed, canceled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service Service @relation(fields: [serviceId], references: [id])
  staff   Staff   @relation(fields: [staffId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  duration    Int // Duration in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
}

model Staff {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
}
